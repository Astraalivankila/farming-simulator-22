name: Deploy to Cloudflare R2

on:
  push:
    branches:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install zip and rclone
        run: |
          sudo apt-get update
          sudo apt-get install -y zip rclone

      - name: Generate timestamp
        id: timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y%m%d%H%M%S')"

      - name: Zip repository
        run: |
          echo "Zipping the repository, excluding .git and hidden files/folders..."
          zip -r release-${{ github.event.repository.name }}-${{ github.ref_name }}-${{ steps.timestamp.outputs.timestamp }}.zip . -x ".*" -x ".*/**" -x ".git/**"
        env:
          ZIP_FILE: release-${{ github.event.repository.name }}-${{ github.ref_name }}-${{ steps.timestamp.outputs.timestamp }}.zip

      - name: Configure rclone
        run: |
          echo -e "[r2]\ntype = s3\nprovider = Cloudflare\naccess_key_id = ${{ secrets.R2_ACCESS_KEY_ID }}\nsecret_access_key = ${{ secrets.R2_SECRET_ACCESS_KEY }}\nendpoint = ${{ secrets.R2_ENDPOINT }}\nno_check_bucket = true" > /tmp/rclone.conf

      - name: Test rclone configuration
        run: |
          echo "Testing rclone configuration..."
          rclone lsd r2:${{ secrets.R2_BUCKET }} --config /tmp/rclone.conf || echo "Listing directories failed as expected due to no_check_bucket"
        env:
          R2_BUCKET: ${{ secrets.R2_BUCKET }}

      - name: Upload to Cloudflare R2
        run: |
          rclone copy release-${{ github.event.repository.name }}-${{ github.ref_name }}-${{ steps.timestamp.outputs.timestamp }}.zip r2:${{ secrets.R2_BUCKET }} --config /tmp/rclone.conf
        env:
          ZIP_FILE: release-${{ github.event.repository.name }}-${{ github.ref_name }}-${{ steps.timestamp.outputs.timestamp }}.zip
          R2_BUCKET: ${{ secrets.R2_BUCKET }}

      - name: Construct download URL
        run: |
          DOWNLOAD_URL="${{ secrets.DOWNLOAD_URL }}"
          FILE_NAME="release-${{ github.event.repository.name }}-${{ github.ref_name }}-${{ steps.timestamp.outputs.timestamp }}.zip"
          DOWNLOAD_URL="${DOWNLOAD_URL}/${FILE_NAME}"
          echo "Download URL: $DOWNLOAD_URL"
        env:
          DOWNLOAD_URL: ${{ secrets.DOWNLOAD_URL }}

      - name: Post to Discord
        run: |
          echo "Posting to Discord..."
          curl -H "Content-Type: application/json" -d "{\"content\": \"New release available: $DOWNLOAD_URL\"}" ${{ secrets.DISCORD_WEBHOOK_URL }}
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
